{"version":3,"sources":["api/api.js","components/CityCard/CityCard.jsx","components/CitiesList/CitiesList.jsx","App.js","reportWebVitals.js","index.js"],"names":["getWeather","city","a","ApiUrl","string","substr","toUpperCase","slice","toLowerCase","capitalize","fetch","response","json","cityWeather","CityCard","onDelete","useState","data","setData","useEffect","then","result","base","className","name","sys","country","src","alt","weather","icon","Math","round","main","temp","wind","speed","clouds","all","pressure","onClick","id","CitiesList","cities","console","log","map","App","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","setCities","input","setInput","onSubmit","event","preventDefault","catch","length","alert","includes","type","placeholder","onChange","target","cityName","filteredCities","filter","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.decc4440.chunk.js","sourcesContent":["\n\nexport  async function getWeather(city) {\n  function capitalize(string) {\n    return string.substr(0,1).toUpperCase() + string.slice(1).toLowerCase();\n  }\n\n  const ApiKey = '13a6405deb1e9db72af059a8a82740ff';\n  const ApiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${capitalize(city)}&appid=${ApiKey}`;\n\n  let response = await fetch(ApiUrl)\n  let cityWeather = await response.json();\n \n  return cityWeather;\n}\n","import React, { useEffect, useState } from 'react';\nimport { getWeather } from '../../api/api'\nimport './CityCard.css'\n\nexport const CityCard = ({ city, onDelete }) => {\n  const [data, setData] = useState({});\n\n  const handleClick = () => {\n    getWeather(city).then(result => setData(result));\n  }\n\n  useEffect(() => {\n    getWeather(city).then(result => setData(result))\n  },[city]);\n\n  return data.base ? (\n      <div key={data.id} className=\"CityCard card border border-secondary\">\n        <div className=\"CityCard__title\">\n          {`${data.name} , ${data.sys.country} `}\n          <img src={`https://www.countryflags.io/${data.sys.country}/flat/16.png`} alt='flag-icon'/>\n        </div>\n        <div className=\"CityCard__desciption\">\n          <img\n            className=\"CityCard__icon align-baseline\"\n            src={`http://openweathermap.org/img/w/${data.weather[0].icon}.png`}\n            alt='weather-icon'\n          ></img>\n          <span className=\"CityCard__temperature\">\n            {`${Math.round(data.main.temp - 273.15)} Â°C`}\n          </span>\n          <div className=\"CityCard__wind\">\n            {`Wind: ${data.wind.speed} m/s`}\n          </div>\n          <div className=\"CityCard__clouds\">\n            {`Clouds: ${data.clouds.all} %`}\n          </div>\n          <div className=\"CityCard__hpa\">\n            {`Pressure:${data.main.pressure * 0.75} mm`}\n          </div>\n        </div>\n        <div className='container CityCard__button-container'>\n          <button\n            className=\"CityCard__button-delete btn btn-sm h-100 w-50 p-1 align-bottom \"\n            onClick={() => onDelete(city)}\n          >\n          </button>\n          <button\n            onClick={() => handleClick()}\n            className=\"CityCard__button-refresh btn btn-sm h-100 w-50 p-1\">\n          </button>\n        </div>\n      </div>\n    )\n    : '';\n}\n\n","import React from 'react';\nimport './CityList.css'\nimport { CityCard } from '../CityCard/CityCard'\n\nexport const CitiesList = ({ cities, onDelete}) => {\n\n  return (\n    <>\n      <div className=\"CityList row row-cols-1 row-cols-sm-2 row-cols-md-4\">\n        {console.log('CITIES', cities)}\n        {cities ? cities.map(city => (\n          <CityCard city={city} onDelete={onDelete} />\n        )): `Select Cities`}\n      </div>\n    </>\n  )\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { CitiesList } from './components/CitiesList/CitiesList';\nimport { getWeather } from './api/api'\n\nexport const App = () => {\n  \n  const [cities, setCities] = useLocalStorage(\"cities\", []);\n  const [input, setInput] = useState('');\n\n  const onDelete = (cityName) => {\n    let filteredCities = cities\n      .filter(city => city !== cityName)\n    setCities(filteredCities);\n    };\n\n  const AddCity = (event) => {\n    event.preventDefault();\n\n    getWeather(input)\n      .catch(error => setInput(''))\n    if (input.length < 2) {\n      alert('Please enter valid city name')\n    } else {\n      if (!cities.includes(input)) {\n        setCities([...cities, input]);\n      } else {\n        alert('City already added')\n      }\n    }\n    setInput('');\n  }\n\n  console.log('STATE _ CITIES - ', cities)\n  function changeValue(event) {\n    const { value } = event.target;\n    setInput(value);\n  }\n\n  return (\n    <div className=\"App\">\n      <form\n        onSubmit={AddCity}\n        className=\"d-flex justify-content-center\"\n      >\n        <input\n          type=\"text\"\n          value={input}\n          placeholder=\"Input City\"\n          onChange={changeValue}\n          className='col-2'\n        >\n        </input>\n        <button\n          type=\"submit\"\n          className='col-1 btn btn-secondary'\n        >\n          Add\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => setCities([])}\n          className='col-1 btn btn-secondary'\n        >\n          Clear\n        </button>\n      </form>\n      <CitiesList cities={cities} onDelete={onDelete} />\n    </div>\n  );\n}\n\nfunction useLocalStorage(key, initialValue) {\n\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      \n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}